<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/login/LoginFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/login/LoginFragment.kt" />
              <option name="originalContent" value="zimport android.app.Activity&#10;import android.content.Intent&#10;import androidx.fragment.app.Fragment&#10;import com.ariftuncer.ne_yesem.presentation.ui.pref.PrefActivity&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.HomeActivity&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.presentation.viewmodel.AuthViewModel&#10;import com.ariftuncer.ne_yesem.di.AppGraph&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.android.gms.tasks.Task&#10;import org.koin.androidx.viewmodel.ext.android.viewModel&#10;&#10;class LoginFragment : Fragment() {&#10;    private val viewModel: AuthViewModel by viewModels { AppGraph.authVmFactory }&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;&#10;    private val googleLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)&#10;                val idToken = account.idToken&#10;                if (!idToken.isNullOrBlank()) {&#10;                    setLoading(true)&#10;                    viewModel.loginWithGoogle(idToken)&#10;                } else {&#10;                    showSnack(&quot;Google token alınamadı&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                showSnack(&quot;Google giriş hata/iptal: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            showSnack(&quot;Google girişi iptal edildi&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupGoogle() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(requireActivity(), gso)&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.loginGoogleBtn.setOnClickListener {&#10;            // Her zaman hesap seçimi için signOut çağrısı&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                startGoogleSignIn()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        viewModel.google.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserGoogle // ViewModel'da bu property olmalı&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            }&#10;        }&#10;        viewModel.login.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserLogin // ViewModel'da bu property olmalı&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            } else {&#10;                showSnack(&quot;Giriş başarısız: $message&quot;)&#10;            }&#10;        }&#10;    }&#10;" />
              <option name="updatedContent" value="import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.RenderEffect&#10;import android.graphics.Shader&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.view.isVisible&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentLoginBinding&#10;import com.ariftuncer.ne_yesem.di.AppGraph&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.HomeActivity&#10;import com.ariftuncer.ne_yesem.presentation.ui.pref.PrefActivity&#10;import com.ariftuncer.ne_yesem.presentation.viewmodel.auth.AuthViewModel&#10;import com.facebook.CallbackManager&#10;import com.facebook.FacebookException&#10;import com.facebook.login.LoginManager&#10;import com.facebook.login.LoginResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.material.snackbar.Snackbar&#10;&#10;class LoginFragment : Fragment() {&#10;    private var _binding: FragmentLoginBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val viewModel: AuthViewModel by viewModels { AppGraph.authVmFactory }&#10;&#10;    // Google&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(com.google.android.gms.common.api.ApiException::class.java)&#10;                val idToken = account.idToken&#10;                if (!idToken.isNullOrBlank()) {&#10;                    setLoading(true)&#10;                    viewModel.loginWithGoogle(idToken)&#10;                } else {&#10;                    showSnack(&quot;Google token alınamadı&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                showSnack(&quot;Google giriş hata/iptal: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            showSnack(&quot;Google girişi iptal edildi&quot;)&#10;        }&#10;    }&#10;&#10;    // Facebook&#10;    private lateinit var fbCallbackManager: CallbackManager&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentLoginBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupGoogle()&#10;        setupFacebook()&#10;        setupObservers()&#10;        setupListeners()&#10;    }&#10;&#10;    private fun setupGoogle() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(requireActivity(), gso)&#10;    }&#10;&#10;    private fun setupFacebook() {&#10;        fbCallbackManager = CallbackManager.Factory.create()&#10;        LoginManager.getInstance().registerCallback(&#10;            fbCallbackManager,&#10;            object : com.facebook.FacebookCallback&lt;LoginResult&gt; {&#10;                override fun onSuccess(result: LoginResult) {&#10;                    val token = result.accessToken?.token&#10;                    if (!token.isNullOrBlank()) {&#10;                        setLoading(true)&#10;                        viewModel.loginWithFacebook(token)&#10;                    } else {&#10;                        showSnack(&quot;Facebook token alınamadı&quot;)&#10;                    }&#10;                }&#10;                override fun onCancel() {&#10;                    showSnack(&quot;Facebook girişi iptal edildi&quot;)&#10;                }&#10;                override fun onError(error: FacebookException) {&#10;                    showSnack(&quot;Facebook hata: ${error.message}&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.loginBtn.setOnClickListener {&#10;            val email = binding.loginEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;            val password = binding.loginPasswordEditTxt.text?.toString()?.trim().orEmpty()&#10;&#10;            if (email.isEmpty() || password.isEmpty()) {&#10;                showSnack(&quot;Lütfen e-posta ve şifre girin&quot;)&#10;                return@setOnClickListener&#10;            }&#10;&#10;            hideKeyboard(binding.root)&#10;            setLoading(true)&#10;            viewModel.login(email, password)&#10;        }&#10;&#10;        binding.forgotPasswordTxt.setOnClickListener {&#10;            val email = binding.loginEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;            if (email.isEmpty()) {&#10;                showSnack(&quot;Şifre sıfırlamak için e-posta girin&quot;)&#10;                return@setOnClickListener&#10;            }&#10;            hideKeyboard(binding.root)&#10;            setLoading(true)&#10;            viewModel.sendResetEmail(email)&#10;        }&#10;&#10;        binding.loginGoogleBtn.setOnClickListener {&#10;            // Her zaman hesap seçimi için signOut çağrısı&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                startGoogleSignIn()&#10;            }&#10;        }&#10;&#10;        binding.loginfacebookBtn.setOnClickListener {&#10;            LoginManager.getInstance()&#10;                .logInWithReadPermissions(this, listOf(&quot;email&quot;, &quot;public_profile&quot;))&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        viewModel.login.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserLogin&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            } else {&#10;                showSnack(&quot;Giriş başarısız: $message&quot;)&#10;            }&#10;        }&#10;&#10;        viewModel.reset.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) showSnack(message)&#10;            else showSnack(&quot;Şifre sıfırlama başarısız: $message&quot;)&#10;        }&#10;&#10;        viewModel.google.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserGoogle&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            }&#10;        }&#10;&#10;        viewModel.facebook.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            // success true ise yönlendirme&#10;        }&#10;    }&#10;&#10;    private fun startGoogleSignIn() {&#10;        val intent = googleSignInClient.signInIntent&#10;        googleLauncher.launch(intent)&#10;    }&#10;&#10;    @Deprecated(&quot;Facebook SDK için onActivityResult yönlendirmesi&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (::fbCallbackManager.isInitialized) {&#10;            fbCallbackManager.onActivityResult(requestCode, resultCode, data)&#10;        }&#10;    }&#10;&#10;    private fun showSnack(message: String) {&#10;        Snackbar.make(binding.root, message, Snackbar.LENGTH_SHORT).show()&#10;    }&#10;&#10;    private fun setLoading(loading: Boolean) {&#10;        binding.loadingOverlaylogin?.isVisible = loading&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            if (loading) {&#10;                binding.contentRoot?.setRenderEffect(&#10;                    RenderEffect.createBlurEffect(20f, 20f, Shader.TileMode.CLAMP)&#10;                )&#10;            } else {&#10;                binding.contentRoot?.setRenderEffect(null)&#10;            }&#10;        }&#10;        binding.loginBtn.isEnabled = !loading&#10;        binding.loginGoogleBtn.isEnabled = !loading&#10;        binding.loginfacebookBtn.isEnabled = !loading&#10;        binding.loginEmailEditTxt.isEnabled = !loading&#10;        binding.loginPasswordEditTxt.isEnabled = !loading&#10;        binding.progressBar?.isVisible = loading&#10;    }&#10;&#10;    private fun hideKeyboard(view: View) {&#10;        val imm = requireContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE)&#10;                as android.view.inputmethod.InputMethodManager&#10;        imm.hideSoftInputFromWindow(view.windowToken, 0)&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/preferences/PreferencesViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/preferences/PreferencesViewModel.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/AddPantryFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/AddPantryFragment.kt" />
              <option name="originalContent" value="package com.ariftuncer.ne_yesem.presentation.ui.home.fridge&#10;&#10;import android.annotation.SuppressLint&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.viewModels&#10;import androidx.navigation.fragment.findNavController&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentAddPantryBinding&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.fridge.adapter.AddPantryAdapter&#10;import com.google.android.material.appbar.MaterialToolbar&#10;import com.ne_yesem.domain.model.IngredientCategory&#10;import com.ne_yesem.domain.model.PantryItem&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class AddPantryFragment : Fragment() {&#10;    private lateinit var binding: FragmentAddPantryBinding&#10;    private val viewModel: PantryViewModel by viewModels()&#10;    private lateinit var adapter: AddPantryAdapter&#10;    private val selectedItems = mutableSetOf&lt;String&gt;()&#10;    private var allItems: List&lt;PantryItem&gt; = emptyList()&#10;    private var selectedCategory: IngredientCategory = IngredientCategory.VEGETABLES&#10;    &#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        &#10;        binding = FragmentAddPantryBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setUpComponents()&#10;        setupTabs()&#10;        setupRecycler()&#10;        observeItems()&#10;        // Tüm itemlar otomatik seçili olsun&#10;        adapter.selectAll()&#10;        binding.addPantries.setOnClickListener {&#10;            val selected = allItems.filter { selectedItems.contains(it.id) }&#10;            selected.forEach { viewModel.addItem(it) }&#10;            selectedItems.clear()&#10;            adapter.notifyDataSetChanged()&#10;        }&#10;    }&#10;    @SuppressLint(&quot;ResourceAsColor&quot;)&#10;    private fun setUpComponents() {&#10;        // Toolbar&#10;        val toolbar = requireActivity().findViewById&lt;MaterialToolbar&gt;(R.id.materialToolbar2)&#10;        toolbar.title = &quot;Yeni Malzeme Ekle&quot;&#10;        toolbar.setTitleTextColor(ContextCompat.getColor(requireContext(), R.color.text950))&#10;        toolbar.isTitleCentered = true&#10;        toolbar.subtitle = &quot;&quot;&#10;&#10;        toolbar.apply {&#10;            setNavigationIcon(R.drawable.back_24)&#10;            setNavigationOnClickListener {&#10;                findNavController().navigateUp()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupTabs() {&#10;        binding.pantryCtg.addOnTabSelectedListener(object : com.google.android.material.tabs.TabLayout.OnTabSelectedListener {&#10;            override fun onTabSelected(tab: com.google.android.material.tabs.TabLayout.Tab?) {&#10;                selectedCategory = when (tab?.position) {&#10;                    0 -&gt; IngredientCategory.VEGETABLES&#10;                    1 -&gt; IngredientCategory.GRAINS&#10;                    2 -&gt; IngredientCategory.MEAT_PROTEIN&#10;                    3 -&gt; IngredientCategory.DAIRY&#10;                    else -&gt; IngredientCategory.VEGETABLES&#10;                }&#10;                viewModel.fetchItemsByCategory(selectedCategory)&#10;            }&#10;            override fun onTabUnselected(tab: com.google.android.material.tabs.TabLayout.Tab?) {}&#10;            override fun onTabReselected(tab: com.google.android.material.tabs.TabLayout.Tab?) {}&#10;        })&#10;        binding.pantryCtg.getTabAt(0)?.select()&#10;    }&#10;&#10;    private fun setupRecycler() {&#10;        adapter = AddPantryAdapter(&#10;            items = allItems,&#10;            selectedItems = selectedItems,&#10;            onItemSelected = { item, isSelected -&gt;&#10;                if (isSelected) selectedItems.add(item.id) else selectedItems.remove(item.id)&#10;                adapter.notifyDataSetChanged()&#10;            }&#10;        )&#10;        binding.rvAddPantry.layoutManager = GridLayoutManager(requireContext(), 2)&#10;        binding.rvAddPantry.adapter = adapter&#10;    }&#10;&#10;    private fun observeItems() {&#10;        viewModel.categoryItems.observe(viewLifecycleOwner) { items -&gt;&#10;            allItems = items&#10;            adapter = AddPantryAdapter(&#10;                items = allItems,&#10;                selectedItems = selectedItems,&#10;                onItemSelected = { item, isSelected -&gt;&#10;                    if (isSelected) selectedItems.add(item.id) else selectedItems.remove(item.id)&#10;                    adapter.notifyDataSetChanged()&#10;                }&#10;            )&#10;            binding.rvAddPantry.adapter = adapter&#10;            // Yeni gelen itemlar da otomatik seçili olsun&#10;            adapter.selectAll()&#10;        }&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.ui.home.fridge&#10;&#10;import android.annotation.SuppressLint&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.viewModels&#10;import androidx.navigation.fragment.findNavController&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentAddPantryBinding&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.fridge.adapter.AddPantryAdapter&#10;import com.google.android.material.appbar.MaterialToolbar&#10;import com.ne_yesem.domain.model.IngredientCategory&#10;import com.ne_yesem.domain.model.PantryItem&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class AddPantryFragment : Fragment() {&#10;    private lateinit var binding: FragmentAddPantryBinding&#10;    private val viewModel: PantryViewModel by viewModels()&#10;    private val pantryItems = mutableListOf&lt;PantryItem&gt;()&#10;    private lateinit var adapter: AddPantryAdapter&#10;    private val selectedItems = mutableSetOf&lt;String&gt;()&#10;    private var selectedCategory: IngredientCategory = IngredientCategory.VEGETABLES&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        &#10;        binding = FragmentAddPantryBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setUpComponents()&#10;        setupTabs()&#10;        setupRecycler()&#10;        setupAddListener()&#10;        binding.addPantries.setOnClickListener {&#10;            val selected = pantryItems.filter { selectedItems.contains(it.id) }&#10;            selected.forEach { viewModel.addItem(it) }&#10;            pantryItems.clear()&#10;            selectedItems.clear()&#10;            adapter.notifyDataSetChanged()&#10;        }&#10;    }&#10;    @SuppressLint(&quot;ResourceAsColor&quot;)&#10;    private fun setUpComponents() {&#10;        // Toolbar&#10;        val toolbar = requireActivity().findViewById&lt;MaterialToolbar&gt;(R.id.materialToolbar2)&#10;        toolbar.title = &quot;Yeni Malzeme Ekle&quot;&#10;        toolbar.setTitleTextColor(ContextCompat.getColor(requireContext(), R.color.text950))&#10;        toolbar.isTitleCentered = true&#10;        toolbar.subtitle = &quot;&quot;&#10;&#10;        toolbar.apply {&#10;            setNavigationIcon(R.drawable.back_24)&#10;            setNavigationOnClickListener {&#10;                findNavController().navigateUp()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupRecycler() {&#10;        adapter = AddPantryAdapter(&#10;            items = pantryItems,&#10;            selectedItems = selectedItems,&#10;            onItemSelected = { item, isSelected -&gt;&#10;                if (isSelected) selectedItems.add(item.id) else selectedItems.remove(item.id)&#10;                adapter.notifyDataSetChanged()&#10;            }&#10;        )&#10;        binding.rvAddPantry.layoutManager = GridLayoutManager(requireContext(), 2)&#10;        binding.rvAddPantry.adapter = adapter&#10;    }&#10;&#10;    private fun setupAddListener() {&#10;        binding.addPantryEditTxt.setOnEditorActionListener { v, actionId, event -&gt;&#10;            val text = binding.addPantryEditTxt.text?.toString()?.trim()&#10;            if (!text.isNullOrEmpty()) {&#10;                val newItem = PantryItem(&#10;                    id = System.currentTimeMillis().toString(),&#10;                    name = text,&#10;                    category = selectedCategory,&#10;                    qty = 1,&#10;                    unit = com.ne_yesem.domain.model.UnitType.ADET&#10;                )&#10;                pantryItems.add(newItem)&#10;                selectedItems.add(newItem.id)&#10;                adapter.notifyDataSetChanged()&#10;                binding.addPantryEditTxt.text?.clear()&#10;                true&#10;            } else false&#10;        }&#10;    }&#10;&#10;    private fun setupTabs() {&#10;        binding.pantryCtg.addOnTabSelectedListener(object : com.google.android.material.tabs.TabLayout.OnTabSelectedListener {&#10;            override fun onTabSelected(tab: com.google.android.material.tabs.TabLayout.Tab?) {&#10;                selectedCategory = when (tab?.position) {&#10;                    0 -&gt; IngredientCategory.VEGETABLES&#10;                    1 -&gt; IngredientCategory.GRAINS&#10;                    2 -&gt; IngredientCategory.MEAT_PROTEIN&#10;                    3 -&gt; IngredientCategory.DAIRY&#10;                    else -&gt; IngredientCategory.VEGETABLES&#10;                }&#10;            }&#10;            override fun onTabUnselected(tab: com.google.android.material.tabs.TabLayout.Tab?) {}&#10;            override fun onTabReselected(tab: com.google.android.material.tabs.TabLayout.Tab?) {}&#10;        })&#10;        binding.pantryCtg.getTabAt(0)?.select()&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/FridgeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/FridgeFragment.kt" />
              <option name="originalContent" value="package com.ariftuncer.ne_yesem.presentation.ui.home.fridge&#10;&#10;import android.annotation.SuppressLint&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.ariftuncer.ne_yesem.R&#10;import com.google.android.material.appbar.MaterialToolbar&#10;&#10;class FridgeFragment : Fragment() {&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        setUpComponents()&#10;        // Inflate the layout for this fragment&#10;        return inflater.inflate(R.layout.fragment_fridge, container, false)&#10;    }&#10;    @SuppressLint(&quot;ResourceAsColor&quot;)&#10;    private fun setUpComponents() {&#10;        val toolbar = requireActivity().findViewById&lt;MaterialToolbar&gt;(R.id.materialToolbar2)&#10;        toolbar.title = &quot;Dolabım&quot;&#10;        toolbar.setTitleTextColor(R.color.text950)&#10;        toolbar.isTitleCentered = true&#10;        toolbar.subtitle = &quot;&quot;&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.ui.home.fridge&#10;&#10;import android.annotation.SuppressLint&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.fridge.adapter.PantryAdapter&#10;import com.google.android.material.appbar.MaterialToolbar&#10;import com.google.android.material.tabs.TabLayout&#10;import com.ne_yesem.domain.model.IngredientCategory&#10;&#10;class FridgeFragment : Fragment() {&#10;&#10;    private lateinit var pantryAdapter: PantryAdapter&#10;    private val viewModel: PantryViewModel by viewModels()&#10;    private lateinit var rvPantry: RecyclerView&#10;    private lateinit var tabCategories: TabLayout&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        setUpComponents()&#10;        // Inflate the layout for this fragment&#10;        return inflater.inflate(R.layout.fragment_fridge, container, false)&#10;    }&#10;&#10;    @SuppressLint(&quot;ResourceAsColor&quot;)&#10;    private fun setUpComponents() {&#10;        val toolbar = requireActivity().findViewById&lt;MaterialToolbar&gt;(R.id.materialToolbar2)&#10;        toolbar.title = &quot;Dolabım&quot;&#10;        toolbar.setTitleTextColor(R.color.text950)&#10;        toolbar.isTitleCentered = true&#10;        toolbar.subtitle = &quot;&quot;&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        rvPantry = view.findViewById(R.id.rvPantry)&#10;        tabCategories = view.findViewById(R.id.tabCategories)&#10;        setupRecycler()&#10;        setupTabs()&#10;        observePantry()&#10;    }&#10;&#10;    private fun setupRecycler() {&#10;        pantryAdapter = PantryAdapter(&#10;            onPlus = { item -&gt;&#10;                val updated = item.copy(qty = item.qty + 1)&#10;                viewModel.updateItem(updated)&#10;            },&#10;            onMinus = { item -&gt;&#10;                if (item.qty &gt; 1) {&#10;                    val updated = item.copy(qty = item.qty - 1)&#10;                    viewModel.updateItem(updated)&#10;                }&#10;            },&#10;            onDelete = { item -&gt;&#10;                viewModel.deleteItem(item.category, item.id)&#10;            }&#10;        )&#10;        rvPantry.layoutManager = GridLayoutManager(requireContext(), 2)&#10;        rvPantry.adapter = pantryAdapter&#10;    }&#10;&#10;    private fun setupTabs() {&#10;        tabCategories.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {&#10;            override fun onTabSelected(tab: TabLayout.Tab?) {&#10;                val cat = when (tab?.position) {&#10;                    0 -&gt; IngredientCategory.VEGETABLE&#10;                    1 -&gt; IngredientCategory.GRAIN&#10;                    2 -&gt; IngredientCategory.PROTEIN&#10;                    3 -&gt; IngredientCategory.MILK&#10;                    else -&gt; IngredientCategory.VEGETABLE&#10;                }&#10;                viewModel.fetchItemsByCategory(cat)&#10;            }&#10;&#10;            override fun onTabUnselected(tab: TabLayout.Tab?) {}&#10;            override fun onTabReselected(tab: TabLayout.Tab?) {}&#10;        })&#10;        // İlk açılışta sebzeler&#10;        Handler(Looper.getMainLooper()).post {&#10;            tabCategories.getTabAt(0)?.select()&#10;        }&#10;    }&#10;&#10;    private fun observePantry() {&#10;        viewModel.categoryItems.observe(viewLifecycleOwner) { items -&gt;&#10;            pantryAdapter.submitList(items)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/PantryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/PantryViewModel.kt" />
              <option name="originalContent" value="package com.ariftuncer.ne_yesem.presentation.ui.home.fridge&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.AddPantryItemUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.DeletePantryItemUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.GetAllPantryItemsUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.GetItemsByCategoryUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.UpdateExpiryUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.UpdatePantryItemUseCase&#10;import com.google.firebase.Timestamp&#10;import com.ne_yesem.domain.model.IngredientCategory&#10;import com.ne_yesem.domain.model.PantryItem&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.ui.home.fridge&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.AddPantryItemUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.DeletePantryItemUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.GetAllPantryItemsUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.GetItemsByCategoryUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.UpdateExpiryUseCase&#10;import com.ariftuncer.ne_yesem.domain.usecase.pantry.UpdatePantryItemUseCase&#10;import com.google.firebase.Timestamp&#10;import com.ne_yesem.domain.model.IngredientCategory&#10;import com.ne_yesem.domain.model.PantryItem&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class PantryViewModel @Inject constructor(&#10;    private val addPantryItemUseCase: AddPantryItemUseCase,&#10;    private val updatePantryItemUseCase: UpdatePantryItemUseCase,&#10;    private val deletePantryItemUseCase: DeletePantryItemUseCase,&#10;    private val getItemsByCategoryUseCase: GetItemsByCategoryUseCase,&#10;    private val getAllPantryItemsUseCase: GetAllPantryItemsUseCase,&#10;    private val updateExpiryUseCase: UpdateExpiryUseCase&#10;) : ViewModel() {&#10;    private val _items = MutableLiveData&lt;List&lt;PantryItem&gt;&gt;()&#10;    val items: LiveData&lt;List&lt;PantryItem&gt;&gt; get() = _items&#10;&#10;    private val _categoryItems = MutableLiveData&lt;List&lt;PantryItem&gt;&gt;()&#10;    val categoryItems: LiveData&lt;List&lt;PantryItem&gt;&gt; get() = _categoryItems&#10;&#10;    private val _loading = MutableLiveData&lt;Boolean&gt;()&#10;    val loading: LiveData&lt;Boolean&gt; get() = _loading&#10;&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; get() = _error&#10;&#10;    fun addItem(item: PantryItem) {&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = addPantryItemUseCase(item)&#10;                fetchAllItems()&#10;                _loading.value = false&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateItem(item: PantryItem) {&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = updatePantryItemUseCase(item)&#10;                fetchAllItems()&#10;                _loading.value = false&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteItem(category: IngredientCategory, itemId: String) {&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            try {&#10;                deletePantryItemUseCase(category, itemId)&#10;                fetchAllItems()&#10;                _loading.value = false&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchItemsByCategory(category: IngredientCategory) {&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = getItemsByCategoryUseCase(category)&#10;                _categoryItems.value = result&#10;                _loading.value = false&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchAllItems() {&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = getAllPantryItemsUseCase()&#10;                _items.value = result&#10;                _loading.value = false&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateExpiry(category: IngredientCategory, itemId: String, expiryAt: Timestamp?) {&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            try {&#10;                updateExpiryUseCase(category, itemId, expiryAt)&#10;                fetchAllItems()&#10;                _loading.value = false&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/adapter/AddPantryAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/adapter/AddPantryAdapter.kt" />
              <option name="originalContent" value="package com.ariftuncer.ne_yesem.presentation.ui.home.fridge.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.core.content.ContextCompat&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ne_yesem.domain.model.PantryItem&#10;&#10;class AddPantryAdapter(&#10;    private val items: List&lt;PantryItem&gt;,&#10;    private val selectedItems: MutableSet&lt;String&gt;,&#10;    private val onItemSelected: (PantryItem, Boolean) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;AddPantryAdapter.VH&gt;() {&#10;&#10;    inner class VH(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val name = itemView.findViewById&lt;TextView&gt;(R.id.addPantryTxt)&#10;        private val checkLayout = itemView.findViewById&lt;View&gt;(R.id.checkLayout)&#10;        private val card = itemView as View&#10;&#10;        fun bind(item: PantryItem, isSelected: Boolean) {&#10;            name.text = item.name&#10;            checkLayout.visibility = if (isSelected) View.VISIBLE else View.GONE&#10;            card.setBackgroundColor(&#10;                ContextCompat.getColor(&#10;                    card.context,&#10;                    if (isSelected) R.color.secondary else android.R.color.white&#10;                )&#10;            )&#10;            card.setOnClickListener {&#10;                val newState = !isSelected&#10;                onItemSelected(item, newState)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {&#10;        val v = LayoutInflater.from(parent.context).inflate(R.layout.item_pantry, parent, false)&#10;        return VH(v)&#10;    }&#10;&#10;    override fun getItemCount() = items.size&#10;&#10;    override fun onBindViewHolder(holder: VH, position: Int) {&#10;        val item = items[position]&#10;        val isSelected = selectedItems.contains(item.id)&#10;        holder.bind(item, isSelected)&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.ui.home.fridge.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.core.content.ContextCompat&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ne_yesem.domain.model.PantryItem&#10;&#10;class AddPantryAdapter(&#10;    private val items: List&lt;PantryItem&gt;,&#10;    private val selectedItems: MutableSet&lt;String&gt;,&#10;    private val onItemSelected: (PantryItem, Boolean) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;AddPantryAdapter.VH&gt;() {&#10;&#10;    inner class VH(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val name = itemView.findViewById&lt;TextView&gt;(R.id.addPantryTxt)&#10;        private val checkLayout = itemView.findViewById&lt;View&gt;(R.id.checkLayout)&#10;        private val card = itemView as androidx.cardview.widget.CardView&#10;&#10;        fun bind(item: PantryItem, isSelected: Boolean) {&#10;            name.text = item.name&#10;            checkLayout.visibility = if (isSelected) View.VISIBLE else View.GONE&#10;            card.setCardBackgroundColor(&#10;                ContextCompat.getColor(&#10;                    card.context,&#10;                    if (isSelected) R.color.secondary else android.R.color.white&#10;                )&#10;            )&#10;            card.setOnClickListener {&#10;                val newState = !isSelected&#10;                onItemSelected(item, newState)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {&#10;        val v = LayoutInflater.from(parent.context).inflate(R.layout.item_pantry, parent, false)&#10;        return VH(v)&#10;    }&#10;&#10;    override fun getItemCount() = items.size&#10;&#10;    override fun onBindViewHolder(holder: VH, position: Int) {&#10;        val item = items[position]&#10;        val isSelected = selectedItems.contains(item.id)&#10;        holder.bind(item, isSelected)&#10;    }&#10;&#10;    fun selectAll() {&#10;        selectedItems.clear()&#10;        items.forEach { selectedItems.add(it.id) }&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/adapter/PantryAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/home/fridge/adapter/PantryAdapter.kt" />
              <option name="originalContent" value="import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ne_yesem.domain.model.PantryItem&#10;import com.ne_yesem.domain.model.UnitType&#10;&#10;// presentation/ui/home/fridge/PantryAdapter.kt&#10;class PantryAdapter(&#10;    private val onPlus: (PantryItem) -&gt; Unit,&#10;    private val onMinus: (PantryItem) -&gt; Unit,&#10;    private val onDelete: (PantryItem) -&gt; Unit&#10;) : ListAdapter&lt;PantryItem, PantryAdapter.VH&gt;(Diff) {&#10;&#10;    object Diff : DiffUtil.ItemCallback&lt;PantryItem&gt;() {&#10;        override fun areItemsTheSame(o: PantryItem, n: PantryItem) = o.id == n.id&#10;        override fun areContentsTheSame(o: PantryItem, n: PantryItem) = o == n&#10;    }&#10;&#10;    inner class VH(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val name = itemView.findViewById&lt;TextView&gt;(R.id.pantryName)&#10;        private val qty  = itemView.findViewById&lt;TextView&gt;(R.id.pantryAmount)&#10;        private val del  = itemView.findViewById&lt;ImageView&gt;(R.id.btnDelete)&#10;        private val plus = itemView.findViewById&lt;ImageView&gt;(R.id.addPantry)&#10;        private val minus= itemView.findViewById&lt;ImageView&gt;(R.id.removePantry)&#10;&#10;        fun bind(m: PantryItem) {&#10;            val unitText = m.unit.displayName()&#10;            name.text = m.name&#10;            qty.text  = &quot;${m.qty} $unitText&quot;&#10;&#10;            del.setOnClickListener  { onDelete(m) }&#10;            plus.setOnClickListener {&#10;                onPlus(m.copy(qty = m.qty + 1))&#10;            }&#10;            minus.setOnClickListener{&#10;                if (m.qty &gt; 1) {&#10;                    onMinus(m.copy(qty = m.qty - 1))&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(p: ViewGroup, vt: Int) =&#10;        VH(LayoutInflater.from(p.context).inflate(R.layout.item_pantry_card, p, false))&#10;&#10;    override fun onBindViewHolder(h: VH, pos: Int) = h.bind(getItem(pos))&#10;}&#10;&#10;fun UnitType.displayName(): String = when(this) {&#10;    UnitType.ADET -&gt; &quot;adet&quot;&#10;    UnitType.GR -&gt; &quot;gr&quot;&#10;    UnitType.ML -&gt; &quot;ml&quot;&#10;    UnitType.LT -&gt; &quot;lt&quot;&#10;}&#10;" />
              <option name="updatedContent" value="import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ne_yesem.domain.model.PantryItem&#10;import com.ne_yesem.domain.model.UnitType&#10;&#10;// presentation/ui/home/fridge/PantryAdapter.kt&#10;class PantryAdapter(&#10;    private val onPlus: (PantryItem) -&gt; Unit,&#10;    private val onMinus: (PantryItem) -&gt; Unit,&#10;    private val onDelete: (PantryItem) -&gt; Unit&#10;) : ListAdapter&lt;PantryItem, PantryAdapter.VH&gt;(Diff) {&#10;&#10;    object Diff : DiffUtil.ItemCallback&lt;PantryItem&gt;() {&#10;        override fun areItemsTheSame(o: PantryItem, n: PantryItem) = o.id == n.id&#10;        override fun areContentsTheSame(o: PantryItem, n: PantryItem) = o == n&#10;    }&#10;&#10;    inner class VH(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val name = itemView.findViewById&lt;TextView&gt;(R.id.pantryName)&#10;        private val qty  = itemView.findViewById&lt;TextView&gt;(R.id.pantryAmount)&#10;        private val del  = itemView.findViewById&lt;ImageView&gt;(R.id.btnDelete)&#10;        private val plus = itemView.findViewById&lt;ImageView&gt;(R.id.addPantry)&#10;        private val minus= itemView.findViewById&lt;ImageView&gt;(R.id.removePantry)&#10;&#10;        fun bind(m: PantryItem) {&#10;            val unitText = m.unit.displayName()&#10;            name.text = m.name&#10;            qty.text  = &quot;${m.qty} $unitText&quot;&#10;&#10;            del.setOnClickListener  { onDelete(m) }&#10;            plus.setOnClickListener {&#10;                val updated = m.copy(qty = m.qty + 1)&#10;                qty.text = &quot;${updated.qty} $unitText&quot;&#10;                onPlus(updated)&#10;            }&#10;            minus.setOnClickListener{&#10;                if (m.qty &gt; 1) {&#10;                    val updated = m.copy(qty = m.qty - 1)&#10;                    qty.text = &quot;${updated.qty} $unitText&quot;&#10;                    onMinus(updated)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(p: ViewGroup, vt: Int) =&#10;        VH(LayoutInflater.from(p.context).inflate(R.layout.item_pantry_card, p, false))&#10;&#10;    override fun onBindViewHolder(h: VH, pos: Int) = h.bind(getItem(pos))&#10;}&#10;&#10;fun UnitType.displayName(): String = when(this) {&#10;    UnitType.ADET -&gt; &quot;adet&quot;&#10;    UnitType.GR -&gt; &quot;gr&quot;&#10;    UnitType.ML -&gt; &quot;ml&quot;&#10;    UnitType.LT -&gt; &quot;lt&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/preferences/Pref3Adapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/preferences/Pref3Adapter.kt" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.ui.preferences&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.core.content.ContextCompat&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.ItemTagCardBinding&#10;&#10;class Pref3Adapter(&#10;    private val onToggle: (position: Int) -&gt; Unit&#10;) : ListAdapter&lt;AllergenTag, Pref3Adapter.VH&gt;(DIFF) {&#10;&#10;    companion object {&#10;        val DIFF = object : DiffUtil.ItemCallback&lt;AllergenTag&gt;() {&#10;            override fun areItemsTheSame(o: AllergenTag, n: AllergenTag) = o.label.equals(n.label, true)&#10;            override fun areContentsTheSame(o: AllergenTag, n: AllergenTag) = o == n&#10;        }&#10;    }&#10;&#10;    inner class VH(val b: ItemTagCardBinding) : RecyclerView.ViewHolder(b.root) {&#10;        fun bind(item: AllergenTag) {&#10;            val ctx = b.root.context&#10;            val secondary = ContextCompat.getColor(ctx, R.color.secondary)&#10;            val white = ContextCompat.getColor(ctx, android.R.color.white)&#10;            val transparent = ContextCompat.getColor(ctx, android.R.color.transparent)&#10;&#10;            b.card.setCardBackgroundColor(if (item.selected) secondary else transparent)&#10;            b.txt.setTextColor(if (item.selected) white else secondary)&#10;            b.check.visibility = if (item.selected) View.VISIBLE else View.GONE&#10;            if (item.selected) b.check.setColorFilter(white)&#10;            b.card.setOnClickListener { onToggle(adapterPosition) }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {&#10;        val inf = LayoutInflater.from(parent.context)&#10;        val binding = ItemTagCardBinding.inflate(inf, parent, false)&#10;        return VH(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: VH, position: Int) {&#10;        holder.b.txt.text = getItem(position).label&#10;        holder.bind(getItem(position))&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_pantry_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_pantry_card.xml" />
              <option name="originalContent" value="&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;6dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;0dp&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;4dp&quot;&gt;&#10;&#10;        &lt;!-- Malzeme adı --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/addPantry&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:text=&quot;+&quot;&#10;            android:textColor=&quot;@color/secondary&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            app:layout_constraintStart_toEndOf=&quot;@+id/pantryAmount&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/pantryName&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;4dp&quot;&#10;            android:text=&quot;Domates&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;!-- Sil ikonu --&gt;&#10;&#10;        &lt;!-- Miktar --&gt;&#10;&#10;        &lt;!-- Arttır --&gt;&#10;&#10;        &lt;!-- Azalt --&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/btnDelete&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:src=&quot;@drawable/delete_14&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toEndOf=&quot;@+id/pantryName&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/pantryAmount&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:text=&quot;3 adet&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toEndOf=&quot;@+id/btnDelete&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/removePantry&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;-&quot;&#10;            android:textColor=&quot;@color/secondary&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;@+id/addPantry&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;@+id/addPantry&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/addPantry&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#13;&#10;    android:layout_width=&quot;wrap_content&quot;&#13;&#10;    android:layout_height=&quot;wrap_content&quot;&#13;&#10;    android:layout_margin=&quot;6dp&quot;&#13;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;    app:cardElevation=&quot;0dp&quot;&#13;&#10;    app:strokeWidth=&quot;1dp&quot;&gt;&#13;&#10;&#13;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:padding=&quot;4dp&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- Malzeme adı --&gt;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/addPantry&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginStart=&quot;8dp&quot;&#13;&#10;            android:text=&quot;+&quot;&#13;&#10;            android:textColor=&quot;@color/secondary&quot;&#13;&#10;            android:textSize=&quot;14sp&quot;&#13;&#10;            app:layout_constraintStart_toEndOf=&quot;@+id/pantryAmount&quot;&#13;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/pantryName&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginStart=&quot;4dp&quot;&#13;&#10;            android:text=&quot;Domates&quot;&#13;&#10;            android:textSize=&quot;14sp&quot;&#13;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#13;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Sil ikonu --&gt;&#13;&#10;&#13;&#10;        &lt;!-- Miktar --&gt;&#13;&#10;&#13;&#10;        &lt;!-- Arttır --&gt;&#13;&#10;&#13;&#10;        &lt;!-- Azalt --&gt;&#13;&#10;&#13;&#10;        &lt;ImageView&#13;&#10;            android:id=&quot;@+id/btnDelete&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginStart=&quot;8dp&quot;&#13;&#10;            android:src=&quot;@drawable/delete_14&quot;&#13;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#13;&#10;            app:layout_constraintStart_toEndOf=&quot;@+id/pantryName&quot;&#13;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/pantryAmount&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginStart=&quot;8dp&quot;&#13;&#10;            android:text=&quot;1 adet&quot;&#13;&#10;            android:textSize=&quot;14sp&quot;&#13;&#10;            app:layout_constraintStart_toEndOf=&quot;@+id/btnDelete&quot;&#13;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/removePantry&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginStart=&quot;8dp&quot;&#13;&#10;            android:text=&quot;-&quot;&#13;&#10;            android:textColor=&quot;@color/secondary&quot;&#13;&#10;            android:textSize=&quot;14sp&quot;&#13;&#10;            app:layout_constraintStart_toEndOf=&quot;@+id/addPantry&quot;&#13;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#13;&#10;        &#13;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#13;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>