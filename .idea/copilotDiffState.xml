<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/login/LoginFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/login/LoginFragment.kt" />
              <option name="originalContent" value="zimport android.app.Activity&#10;import android.content.Intent&#10;import androidx.fragment.app.Fragment&#10;import com.ariftuncer.ne_yesem.presentation.ui.pref.PrefActivity&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.HomeActivity&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.presentation.viewmodel.AuthViewModel&#10;import com.ariftuncer.ne_yesem.di.AppGraph&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.android.gms.tasks.Task&#10;import org.koin.androidx.viewmodel.ext.android.viewModel&#10;&#10;class LoginFragment : Fragment() {&#10;    private val viewModel: AuthViewModel by viewModels { AppGraph.authVmFactory }&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;&#10;    private val googleLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)&#10;                val idToken = account.idToken&#10;                if (!idToken.isNullOrBlank()) {&#10;                    setLoading(true)&#10;                    viewModel.loginWithGoogle(idToken)&#10;                } else {&#10;                    showSnack(&quot;Google token alınamadı&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                showSnack(&quot;Google giriş hata/iptal: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            showSnack(&quot;Google girişi iptal edildi&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupGoogle() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(requireActivity(), gso)&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.loginGoogleBtn.setOnClickListener {&#10;            // Her zaman hesap seçimi için signOut çağrısı&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                startGoogleSignIn()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        viewModel.google.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserGoogle // ViewModel'da bu property olmalı&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            }&#10;        }&#10;        viewModel.login.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserLogin // ViewModel'da bu property olmalı&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            } else {&#10;                showSnack(&quot;Giriş başarısız: $message&quot;)&#10;            }&#10;        }&#10;    }&#10;" />
              <option name="updatedContent" value="import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.RenderEffect&#10;import android.graphics.Shader&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.view.isVisible&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentLoginBinding&#10;import com.ariftuncer.ne_yesem.di.AppGraph&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.HomeActivity&#10;import com.ariftuncer.ne_yesem.presentation.ui.pref.PrefActivity&#10;import com.ariftuncer.ne_yesem.presentation.viewmodel.auth.AuthViewModel&#10;import com.facebook.CallbackManager&#10;import com.facebook.FacebookException&#10;import com.facebook.login.LoginManager&#10;import com.facebook.login.LoginResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.material.snackbar.Snackbar&#10;&#10;class LoginFragment : Fragment() {&#10;    private var _binding: FragmentLoginBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val viewModel: AuthViewModel by viewModels { AppGraph.authVmFactory }&#10;&#10;    // Google&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(com.google.android.gms.common.api.ApiException::class.java)&#10;                val idToken = account.idToken&#10;                if (!idToken.isNullOrBlank()) {&#10;                    setLoading(true)&#10;                    viewModel.loginWithGoogle(idToken)&#10;                } else {&#10;                    showSnack(&quot;Google token alınamadı&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                showSnack(&quot;Google giriş hata/iptal: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            showSnack(&quot;Google girişi iptal edildi&quot;)&#10;        }&#10;    }&#10;&#10;    // Facebook&#10;    private lateinit var fbCallbackManager: CallbackManager&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentLoginBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupGoogle()&#10;        setupFacebook()&#10;        setupObservers()&#10;        setupListeners()&#10;    }&#10;&#10;    private fun setupGoogle() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(requireActivity(), gso)&#10;    }&#10;&#10;    private fun setupFacebook() {&#10;        fbCallbackManager = CallbackManager.Factory.create()&#10;        LoginManager.getInstance().registerCallback(&#10;            fbCallbackManager,&#10;            object : com.facebook.FacebookCallback&lt;LoginResult&gt; {&#10;                override fun onSuccess(result: LoginResult) {&#10;                    val token = result.accessToken?.token&#10;                    if (!token.isNullOrBlank()) {&#10;                        setLoading(true)&#10;                        viewModel.loginWithFacebook(token)&#10;                    } else {&#10;                        showSnack(&quot;Facebook token alınamadı&quot;)&#10;                    }&#10;                }&#10;                override fun onCancel() {&#10;                    showSnack(&quot;Facebook girişi iptal edildi&quot;)&#10;                }&#10;                override fun onError(error: FacebookException) {&#10;                    showSnack(&quot;Facebook hata: ${error.message}&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.loginBtn.setOnClickListener {&#10;            val email = binding.loginEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;            val password = binding.loginPasswordEditTxt.text?.toString()?.trim().orEmpty()&#10;&#10;            if (email.isEmpty() || password.isEmpty()) {&#10;                showSnack(&quot;Lütfen e-posta ve şifre girin&quot;)&#10;                return@setOnClickListener&#10;            }&#10;&#10;            hideKeyboard(binding.root)&#10;            setLoading(true)&#10;            viewModel.login(email, password)&#10;        }&#10;&#10;        binding.forgotPasswordTxt.setOnClickListener {&#10;            val email = binding.loginEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;            if (email.isEmpty()) {&#10;                showSnack(&quot;Şifre sıfırlamak için e-posta girin&quot;)&#10;                return@setOnClickListener&#10;            }&#10;            hideKeyboard(binding.root)&#10;            setLoading(true)&#10;            viewModel.sendResetEmail(email)&#10;        }&#10;&#10;        binding.loginGoogleBtn.setOnClickListener {&#10;            // Her zaman hesap seçimi için signOut çağrısı&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                startGoogleSignIn()&#10;            }&#10;        }&#10;&#10;        binding.loginfacebookBtn.setOnClickListener {&#10;            LoginManager.getInstance()&#10;                .logInWithReadPermissions(this, listOf(&quot;email&quot;, &quot;public_profile&quot;))&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        viewModel.login.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserLogin&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            } else {&#10;                showSnack(&quot;Giriş başarısız: $message&quot;)&#10;            }&#10;        }&#10;&#10;        viewModel.reset.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) showSnack(message)&#10;            else showSnack(&quot;Şifre sıfırlama başarısız: $message&quot;)&#10;        }&#10;&#10;        viewModel.google.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserGoogle&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            }&#10;        }&#10;&#10;        viewModel.facebook.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            // success true ise yönlendirme&#10;        }&#10;    }&#10;&#10;    private fun startGoogleSignIn() {&#10;        val intent = googleSignInClient.signInIntent&#10;        googleLauncher.launch(intent)&#10;    }&#10;&#10;    @Deprecated(&quot;Facebook SDK için onActivityResult yönlendirmesi&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (::fbCallbackManager.isInitialized) {&#10;            fbCallbackManager.onActivityResult(requestCode, resultCode, data)&#10;        }&#10;    }&#10;&#10;    private fun showSnack(message: String) {&#10;        Snackbar.make(binding.root, message, Snackbar.LENGTH_SHORT).show()&#10;    }&#10;&#10;    private fun setLoading(loading: Boolean) {&#10;        binding.loadingOverlaylogin?.isVisible = loading&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            if (loading) {&#10;                binding.contentRoot?.setRenderEffect(&#10;                    RenderEffect.createBlurEffect(20f, 20f, Shader.TileMode.CLAMP)&#10;                )&#10;            } else {&#10;                binding.contentRoot?.setRenderEffect(null)&#10;            }&#10;        }&#10;        binding.loginBtn.isEnabled = !loading&#10;        binding.loginGoogleBtn.isEnabled = !loading&#10;        binding.loginfacebookBtn.isEnabled = !loading&#10;        binding.loginEmailEditTxt.isEnabled = !loading&#10;        binding.loginPasswordEditTxt.isEnabled = !loading&#10;        binding.progressBar?.isVisible = loading&#10;    }&#10;&#10;    private fun hideKeyboard(view: View) {&#10;        val imm = requireContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE)&#10;                as android.view.inputmethod.InputMethodManager&#10;        imm.hideSoftInputFromWindow(view.windowToken, 0)&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/preferences/PreferencesViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/preferences/PreferencesViewModel.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/preferences/Pref2Fragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/preferences/Pref2Fragment.kt" />
              <option name="originalContent" value="package com.ariftuncer.ne_yesem.presentation.ui.preferences&#10;&#10;import android.os.Bundle&#10;import android.view.KeyEvent&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.view.inputmethod.EditorInfo&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.activityViewModels&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentPref2Binding&#10;import com.google.android.flexbox.AlignItems&#10;import com.google.android.flexbox.FlexDirection&#10;import com.google.android.flexbox.FlexWrap&#10;import com.google.android.flexbox.FlexboxLayoutManager&#10;import com.google.android.flexbox.JustifyContent&#10;import androidx.viewpager2.widget.ViewPager2&#10;import com.ariftuncer.ne_yesem.presentation.preferences.PreferencesViewModel&#10;import com.ariftuncer.ne_yesem.presentation.ui.preferences.prefAdapters.AllergenTag&#10;import com.ariftuncer.ne_yesem.presentation.ui.preferences.prefAdapters.Pref2Adapter&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class Pref2Fragment : Fragment() {&#10;&#10;    private var _binding: FragmentPref2Binding? = null&#10;    private val binding get() = _binding!!&#10;    private val vm: PreferencesViewModel by activityViewModels()&#10;&#10;    private val adapter by lazy { Pref2Adapter(::toggleAt) }&#10;&#10;    // UI-only state&#10;    private val items = mutableListOf(&#10;        AllergenTag(&quot;Domates&quot;),&#10;        AllergenTag(&quot;Peynir&quot;),&#10;        AllergenTag(&quot;Yumurta&quot;),&#10;        AllergenTag(&quot;Fıstık&quot;),&#10;        AllergenTag(&quot;Kakao&quot;),&#10;        AllergenTag(&quot;Biber&quot;)&#10;    )&#10;&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {&#10;        _binding = FragmentPref2Binding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;&#10;        listeners()&#10;        // RecyclerView + Flexbox (wrap'lı görünüm)&#10;        val lm = FlexboxLayoutManager(requireContext()).apply {&#10;            flexDirection = FlexDirection.ROW&#10;            flexWrap = FlexWrap.WRAP&#10;            justifyContent = JustifyContent.FLEX_START&#10;            alignItems = AlignItems.CENTER&#10;        }&#10;        binding.recyclerTags.layoutManager = lm&#10;        binding.recyclerTags.adapter = adapter&#10;        binding.recyclerTags.setHasFixedSize(false)&#10;        submit()&#10;&#10;&#10;    }&#10;    private fun listeners(){&#10;        // Ekleme (IME Done)&#10;        binding.etAddProduct.setOnEditorActionListener { tv, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) { addFromInput(); true } else false&#10;        }&#10;        // Ekleme (Enter)&#10;        binding.etAddProduct.setOnKeyListener { _, keyCode, event -&gt;&#10;            if (keyCode == KeyEvent.KEYCODE_ENTER &amp;&amp; event.action == KeyEvent.ACTION_UP) { addFromInput(); true } else false&#10;        }&#10;&#10;        // ViewPager: Geç / Devam&#10;        val pager = requireActivity().findViewById&lt;ViewPager2&gt;(R.id.prefViewPager)&#10;        binding.pref2NextBtn.setOnClickListener { pager.currentItem = 2 }&#10;        binding.pref2SkipText.setOnClickListener { pager.currentItem = 3 }&#10;&#10;    }&#10;&#10;    private fun toggleAt(position: Int) {&#10;        if (position in items.indices) {&#10;            val it = items[position]&#10;            items[position] = it.copy(selected = !it.selected)&#10;            if (it.selected) {&#10;                vm.toggleAllergen(it.label) // seçili ise ekle&#10;            }&#10;            submit()&#10;        }&#10;    }&#10;&#10;    private fun addFromInput() {&#10;        val text = binding.etAddProduct.text?.toString()?.trim().orEmpty()&#10;        val exists = items.any { it.label.equals(text, ignoreCase = true) }&#10;        if (text.length in 2..30 &amp;&amp; !exists) {&#10;            items += AllergenTag(text, selected = true) // yeni ekleneni seçili getir&#10;            binding.etAddProduct.text = null&#10;            submit()&#10;        } else {&#10;            binding.etAddProduct.error = &quot;Geçerli bir ürün girin&quot;&#10;        }&#10;    }&#10;&#10;    private fun submit() {&#10;        adapter.submitList(items.toList()) // kopya ile diff tetikle&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.ui.preferences&#10;&#10;import android.os.Bundle&#10;import android.view.KeyEvent&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.view.inputmethod.EditorInfo&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.activityViewModels&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentPref2Binding&#10;import com.google.android.flexbox.AlignItems&#10;import com.google.android.flexbox.FlexDirection&#10;import com.google.android.flexbox.FlexWrap&#10;import com.google.android.flexbox.FlexboxLayoutManager&#10;import com.google.android.flexbox.JustifyContent&#10;import androidx.viewpager2.widget.ViewPager2&#10;import com.ariftuncer.ne_yesem.presentation.preferences.PreferencesViewModel&#10;import com.ariftuncer.ne_yesem.presentation.ui.preferences.prefAdapters.AllergenTag&#10;import com.ariftuncer.ne_yesem.presentation.ui.preferences.prefAdapters.Pref2Adapter&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class Pref2Fragment : Fragment() {&#10;&#10;    private var _binding: FragmentPref2Binding? = null&#10;    private val binding get() = _binding!!&#10;    private val vm: PreferencesViewModel by activityViewModels()&#10;&#10;    private val adapter by lazy { Pref2Adapter(::toggleAt) }&#10;&#10;    // UI-only state&#10;    private val items = mutableListOf(&#10;        AllergenTag(&quot;Domates&quot;),&#10;        AllergenTag(&quot;Peynir&quot;),&#10;        AllergenTag(&quot;Yumurta&quot;),&#10;        AllergenTag(&quot;Fıstık&quot;),&#10;        AllergenTag(&quot;Kakao&quot;),&#10;        AllergenTag(&quot;Biber&quot;)&#10;    )&#10;&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {&#10;        _binding = FragmentPref2Binding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;&#10;        listeners()&#10;        // RecyclerView + Flexbox (wrap'lı görünüm)&#10;        val lm = FlexboxLayoutManager(requireContext()).apply {&#10;            flexDirection = FlexDirection.ROW&#10;            flexWrap = FlexWrap.WRAP&#10;            justifyContent = JustifyContent.FLEX_START&#10;            alignItems = AlignItems.CENTER&#10;        }&#10;        binding.recyclerTags.layoutManager = lm&#10;        binding.recyclerTags.adapter = adapter&#10;        binding.recyclerTags.setHasFixedSize(false)&#10;        submit()&#10;&#10;&#10;    }&#10;    private fun listeners(){&#10;        // Ekleme (IME Done)&#10;        binding.etAddProduct.setOnEditorActionListener { tv, actionId, _ -&gt;&#10;            if (actionId == EditorInfo.IME_ACTION_DONE) { addFromInput(); true } else false&#10;        }&#10;        // Ekleme (Enter)&#10;        binding.etAddProduct.setOnKeyListener { _, keyCode, event -&gt;&#10;            if (keyCode == KeyEvent.KEYCODE_ENTER &amp;&amp; event.action == KeyEvent.ACTION_UP) { addFromInput(); true } else false&#10;        }&#10;&#10;        // ViewPager: Geç / Devam&#10;        val pager = requireActivity().findViewById&lt;ViewPager2&gt;(R.id.prefViewPager)&#10;        binding.pref2NextBtn.setOnClickListener { pager.currentItem = 2 }&#10;        binding.pref2SkipText.setOnClickListener { pager.currentItem = 3 }&#10;&#10;    }&#10;&#10;    private fun toggleAt(position: Int) {&#10;        if (position in items.indices) {&#10;            val it = items[position]&#10;            items[position] = it.copy(selected = !it.selected)&#10;            submit()&#10;            // Seçili ise ekle, değilse çıkar&#10;            if (items[position].selected) {&#10;                vm.toggleAllergen(it.label)&#10;            } else {&#10;                vm.removeAllergen(it.label)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun addFromInput() {&#10;        val text = binding.etAddProduct.text?.toString()?.trim().orEmpty()&#10;        val exists = items.any { it.label.equals(text, ignoreCase = true) }&#10;        if (text.length in 2..30 &amp;&amp; !exists) {&#10;            items += AllergenTag(text, selected = true)&#10;            binding.etAddProduct.text = null&#10;            submit()&#10;            vm.toggleAllergen(text) // elle eklenen de seçili olarak ekleniyor&#10;        } else {&#10;            binding.etAddProduct.error = &quot;Geçerli bir ürün girin&quot;&#10;        }&#10;    }&#10;&#10;    private fun submit() {&#10;        adapter.submitList(items.toList()) // kopya ile diff tetikle&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/preferences/Pref3Adapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/preferences/Pref3Adapter.kt" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.ui.preferences&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.core.content.ContextCompat&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.ItemTagCardBinding&#10;&#10;class Pref3Adapter(&#10;    private val onToggle: (position: Int) -&gt; Unit&#10;) : ListAdapter&lt;AllergenTag, Pref3Adapter.VH&gt;(DIFF) {&#10;&#10;    companion object {&#10;        val DIFF = object : DiffUtil.ItemCallback&lt;AllergenTag&gt;() {&#10;            override fun areItemsTheSame(o: AllergenTag, n: AllergenTag) = o.label.equals(n.label, true)&#10;            override fun areContentsTheSame(o: AllergenTag, n: AllergenTag) = o == n&#10;        }&#10;    }&#10;&#10;    inner class VH(val b: ItemTagCardBinding) : RecyclerView.ViewHolder(b.root) {&#10;        fun bind(item: AllergenTag) {&#10;            val ctx = b.root.context&#10;            val secondary = ContextCompat.getColor(ctx, R.color.secondary)&#10;            val white = ContextCompat.getColor(ctx, android.R.color.white)&#10;            val transparent = ContextCompat.getColor(ctx, android.R.color.transparent)&#10;&#10;            b.card.setCardBackgroundColor(if (item.selected) secondary else transparent)&#10;            b.txt.setTextColor(if (item.selected) white else secondary)&#10;            b.check.visibility = if (item.selected) View.VISIBLE else View.GONE&#10;            if (item.selected) b.check.setColorFilter(white)&#10;            b.card.setOnClickListener { onToggle(adapterPosition) }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {&#10;        val inf = LayoutInflater.from(parent.context)&#10;        val binding = ItemTagCardBinding.inflate(inf, parent, false)&#10;        return VH(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: VH, position: Int) {&#10;        holder.b.txt.text = getItem(position).label&#10;        holder.bind(getItem(position))&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>