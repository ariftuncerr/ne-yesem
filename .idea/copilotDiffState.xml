<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/data/remote/firestore/FirestoreUserRemoteDataSource.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/data/remote/firestore/FirestoreUserRemoteDataSource.kt" />
              <option name="originalContent" value="// data/remote/firestore/FirestoreUserRemoteDataSource.kt&#10;package com.ariftuncer.ne_yesem.data.remote.firestore&#10;&#10;import com.ariftuncer.ne_yesem.core.result.AppError&#10;import com.ariftuncer.ne_yesem.core.result.AppResult&#10;import com.ariftuncer.ne_yesem.core.result.Either&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.ne_yesem.domain.model.UserProfile&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class FirestoreUserRemoteDataSource(&#10;    private val db: FirebaseFirestore&#10;) : UserRemoteDataSource {&#10;&#10;    override suspend fun ensureUserDocument(profile: UserProfile): AppResult&lt;Unit&gt; =&#10;        runCatching {&#10;            val ref = db.collection(&quot;users&quot;).document(profile.uid)&#10;            val snap = ref.get().await()&#10;            if (!snap.exists()) {&#10;                ref.set(&#10;                    mapOf(&#10;                        &quot;uid&quot; to profile.uid,&#10;                        &quot;name&quot; to profile.name,&#10;                        &quot;phoneNumber&quot; to profile.phoneNumber&#10;                    )&#10;                ).await()&#10;            }&#10;            Either.Right(Unit)&#10;        }.getOrElse { Either.Left(AppError.Network(it.message)) }&#10;&#10;    override suspend fun fetchUserProfile(uid: String): AppResult&lt;UserProfile?&gt; =&#10;        runCatching {&#10;            val snap = db.collection(&quot;users&quot;).document(uid).get().await()&#10;            if (!snap.exists()) return Either.Right(null)&#10;            val data = snap.data!!&#10;            Either.Right(&#10;                UserProfile(&#10;                    uid = uid,&#10;                    name = data[&quot;name&quot;] as? String,&#10;                    phoneNumber = data[&quot;phoneNumber&quot;] as? String&#10;                )&#10;            )&#10;        }.getOrElse { Either.Left(AppError.Network(it.message)) }&#10;}&#10;" />
              <option name="updatedContent" value="// data/remote/firestore/FirestoreUserRemoteDataSource.kt&#10;package com.ariftuncer.ne_yesem.data.remote.firestore&#10;&#10;import com.ariftuncer.ne_yesem.core.result.AppError&#10;import com.ariftuncer.ne_yesem.core.result.AppResult&#10;import com.ariftuncer.ne_yesem.core.result.Either&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.ne_yesem.domain.model.UserProfile&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class FirestoreUserRemoteDataSource(&#10;    private val db: FirebaseFirestore&#10;) : UserRemoteDataSource {&#10;&#10;    override suspend fun ensureUserDocument(profile: UserProfile): AppResult&lt;Unit&gt; =&#10;        runCatching {&#10;            val ref = db.collection(&quot;users&quot;).document(profile.uid)&#10;            val snap = ref.get().await()&#10;            if (!snap.exists()) {&#10;                ref.set(&#10;                    mapOf(&#10;                        &quot;uid&quot; to profile.uid,&#10;                        &quot;name&quot; to profile.name,&#10;                        &quot;phoneNumber&quot; to profile.phoneNumber,&#10;                        &quot;email&quot; to profile.email, // email eklendi&#10;                        &quot;fullName&quot; to profile.fullName // isim soyisim eklendi&#10;                    )&#10;                ).await()&#10;            }&#10;            Either.Right(Unit)&#10;        }.getOrElse { Either.Left(AppError.Network(it.message)) }&#10;&#10;    override suspend fun fetchUserProfile(uid: String): AppResult&lt;UserProfile?&gt; =&#10;        runCatching {&#10;            val snap = db.collection(&quot;users&quot;).document(uid).get().await()&#10;            if (!snap.exists()) return Either.Right(null)&#10;            val data = snap.data!!&#10;            Either.Right(&#10;                UserProfile(&#10;                    uid = uid,&#10;                    name = data[&quot;name&quot;] as? String,&#10;                    phoneNumber = data[&quot;phoneNumber&quot;] as? String&#10;                )&#10;            )&#10;        }.getOrElse { Either.Left(AppError.Network(it.message)) }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/data/repository_impl/auth/AuthRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/data/repository_impl/auth/AuthRepositoryImpl.kt" />
              <option name="originalContent" value="package com.ariftuncer.ne_yesem.data.repository&#10;import com.ariftuncer.ne_yesem.core.result.AppResult&#10;import com.ariftuncer.ne_yesem.core.result.Either&#10;import com.ariftuncer.ne_yesem.domain.model.AuthOutcome&#10;import com.ariftuncer.ne_yesem.domain.model.AuthUser&#10;import com.ariftuncer.ne_yesem.domain.repository.AuthRepository&#10;import com.ariftuncer.ne_yesem.data.remote.auth.AuthService&#10;import com.ariftuncer.ne_yesem.data.remote.firestore.UserRemoteDataSource&#10;import com.ne_yesem.domain.model.UserProfile&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class AuthRepositoryImpl(&#10;    private val auth: AuthService,&#10;    private val userRemote: UserRemoteDataSource&#10;) : AuthRepository {&#10;&#10;    override suspend fun signUpWithEmail(email: String, password: String): AppResult&lt;AuthOutcome&gt; =&#10;        when (val r = auth.signUpWithEmail(email, password)) {&#10;            is Either.Left  -&gt; r&#10;            is Either.Right -&gt; ensureUserIfNeeded(r.value)&#10;        }&#10;&#10;    override suspend fun signInWithEmail(email: String, password: String): AppResult&lt;AuthOutcome&gt; =&#10;        when (val r = auth.signInWithEmail(email, password)) {&#10;            is Either.Left  -&gt; r&#10;            is Either.Right -&gt; ensureUserIfNeeded(r.value)&#10;        }&#10;&#10;    override suspend fun signInWithGoogle(idToken: String): AppResult&lt;AuthOutcome&gt; =&#10;        when (val r = auth.signInWithGoogle(idToken)) {&#10;            is Either.Left  -&gt; r&#10;            is Either.Right -&gt; ensureUserIfNeeded(r.value)&#10;        }&#10;&#10;    override suspend fun signInWithFacebook(accessToken: String): AppResult&lt;AuthOutcome&gt; =&#10;        when (val r = auth.signInWithFacebook(accessToken)) {&#10;            is Either.Left  -&gt; r&#10;            is Either.Right -&gt; ensureUserIfNeeded(r.value)&#10;        }&#10;&#10;    override suspend fun sendPasswordReset(email: String) = auth.sendPasswordReset(email)&#10;    override fun observeAuthUser(): Flow&lt;AuthUser?&gt; = auth.observeAuthState()&#10;    override suspend fun signOut() = auth.signOut()&#10;&#10;    private suspend fun ensureUserIfNeeded(out: AuthOutcome): AppResult&lt;AuthOutcome&gt; {&#10;        if (!out.isNewUser) return Either.Right(out)&#10;        val profile = UserProfile(uid = out.user.uid, name = null, phoneNumber = null)&#10;        return when (val e = userRemote.ensureUserDocument(profile)) {&#10;            is Either.Left  -&gt; e&#10;            is Either.Right -&gt; Either.Right(out)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.data.repository&#10;import com.ariftuncer.ne_yesem.core.result.AppResult&#10;import com.ariftuncer.ne_yesem.core.result.Either&#10;import com.ariftuncer.ne_yesem.domain.model.AuthOutcome&#10;import com.ariftuncer.ne_yesem.domain.model.AuthUser&#10;import com.ariftuncer.ne_yesem.domain.repository.AuthRepository&#10;import com.ariftuncer.ne_yesem.data.remote.auth.AuthService&#10;import com.ariftuncer.ne_yesem.data.remote.firestore.UserRemoteDataSource&#10;import com.ne_yesem.domain.model.UserProfile&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class AuthRepositoryImpl(&#10;    private val auth: AuthService,&#10;    private val userRemote: UserRemoteDataSource&#10;) : AuthRepository {&#10;&#10;    override suspend fun signUpWithEmail(email: String, password: String): AppResult&lt;AuthOutcome&gt; =&#10;        when (val r = auth.signUpWithEmail(email, password)) {&#10;            is Either.Left  -&gt; r&#10;            is Either.Right -&gt; ensureUserIfNeeded(r.value)&#10;        }&#10;&#10;    override suspend fun signInWithEmail(email: String, password: String): AppResult&lt;AuthOutcome&gt; =&#10;        when (val r = auth.signInWithEmail(email, password)) {&#10;            is Either.Left  -&gt; r&#10;            is Either.Right -&gt; ensureUserIfNeeded(r.value)&#10;        }&#10;&#10;    override suspend fun signInWithGoogle(idToken: String): AppResult&lt;AuthOutcome&gt; =&#10;        when (val r = auth.signInWithGoogle(idToken)) {&#10;            is Either.Left  -&gt; r&#10;            is Either.Right -&gt; ensureUserIfNeeded(r.value)&#10;        }&#10;&#10;    override suspend fun signInWithFacebook(accessToken: String): AppResult&lt;AuthOutcome&gt; =&#10;        when (val r = auth.signInWithFacebook(accessToken)) {&#10;            is Either.Left  -&gt; r&#10;            is Either.Right -&gt; ensureUserIfNeeded(r.value)&#10;        }&#10;&#10;    override suspend fun sendPasswordReset(email: String) = auth.sendPasswordReset(email)&#10;    override fun observeAuthUser(): Flow&lt;AuthUser?&gt; = auth.observeAuthState()&#10;    override suspend fun signOut() = auth.signOut()&#10;&#10;    private suspend fun ensureUserIfNeeded(out: AuthOutcome): AppResult&lt;AuthOutcome&gt; {&#10;        if (!out.isNewUser) return Either.Right(out)&#10;        val profile = UserProfile(&#10;            uid = out.user.uid,&#10;            name = out.user.name, // varsa&#10;            phoneNumber = out.user.phoneNumber, // varsa&#10;            email = out.user.email, // yeni alan&#10;            fullName = out.user.fullName // yeni alan&#10;        )&#10;        return when (val e = userRemote.ensureUserDocument(profile)) {&#10;            is Either.Left  -&gt; e&#10;            is Either.Right -&gt; Either.Right(out)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/login/LoginFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/login/LoginFragment.kt" />
              <option name="originalContent" value="zimport android.app.Activity&#10;import android.content.Intent&#10;import androidx.fragment.app.Fragment&#10;import com.ariftuncer.ne_yesem.presentation.ui.pref.PrefActivity&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.HomeActivity&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.presentation.viewmodel.AuthViewModel&#10;import com.ariftuncer.ne_yesem.di.AppGraph&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.android.gms.tasks.Task&#10;import org.koin.androidx.viewmodel.ext.android.viewModel&#10;&#10;class LoginFragment : Fragment() {&#10;    private val viewModel: AuthViewModel by viewModels { AppGraph.authVmFactory }&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;&#10;    private val googleLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)&#10;                val idToken = account.idToken&#10;                if (!idToken.isNullOrBlank()) {&#10;                    setLoading(true)&#10;                    viewModel.loginWithGoogle(idToken)&#10;                } else {&#10;                    showSnack(&quot;Google token alınamadı&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                showSnack(&quot;Google giriş hata/iptal: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            showSnack(&quot;Google girişi iptal edildi&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupGoogle() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(requireActivity(), gso)&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.loginGoogleBtn.setOnClickListener {&#10;            // Her zaman hesap seçimi için signOut çağrısı&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                startGoogleSignIn()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        viewModel.google.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserGoogle // ViewModel'da bu property olmalı&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            }&#10;        }&#10;        viewModel.login.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserLogin // ViewModel'da bu property olmalı&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            } else {&#10;                showSnack(&quot;Giriş başarısız: $message&quot;)&#10;            }&#10;        }&#10;    }&#10;" />
              <option name="updatedContent" value="import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.RenderEffect&#10;import android.graphics.Shader&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.view.isVisible&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentLoginBinding&#10;import com.ariftuncer.ne_yesem.di.AppGraph&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.HomeActivity&#10;import com.ariftuncer.ne_yesem.presentation.ui.pref.PrefActivity&#10;import com.ariftuncer.ne_yesem.presentation.viewmodel.auth.AuthViewModel&#10;import com.facebook.CallbackManager&#10;import com.facebook.FacebookException&#10;import com.facebook.login.LoginManager&#10;import com.facebook.login.LoginResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.material.snackbar.Snackbar&#10;&#10;class LoginFragment : Fragment() {&#10;    private var _binding: FragmentLoginBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val viewModel: AuthViewModel by viewModels { AppGraph.authVmFactory }&#10;&#10;    // Google&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(com.google.android.gms.common.api.ApiException::class.java)&#10;                val idToken = account.idToken&#10;                if (!idToken.isNullOrBlank()) {&#10;                    setLoading(true)&#10;                    viewModel.loginWithGoogle(idToken)&#10;                } else {&#10;                    showSnack(&quot;Google token alınamadı&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                showSnack(&quot;Google giriş hata/iptal: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            showSnack(&quot;Google girişi iptal edildi&quot;)&#10;        }&#10;    }&#10;&#10;    // Facebook&#10;    private lateinit var fbCallbackManager: CallbackManager&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentLoginBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupGoogle()&#10;        setupFacebook()&#10;        setupObservers()&#10;        setupListeners()&#10;    }&#10;&#10;    private fun setupGoogle() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(requireActivity(), gso)&#10;    }&#10;&#10;    private fun setupFacebook() {&#10;        fbCallbackManager = CallbackManager.Factory.create()&#10;        LoginManager.getInstance().registerCallback(&#10;            fbCallbackManager,&#10;            object : com.facebook.FacebookCallback&lt;LoginResult&gt; {&#10;                override fun onSuccess(result: LoginResult) {&#10;                    val token = result.accessToken?.token&#10;                    if (!token.isNullOrBlank()) {&#10;                        setLoading(true)&#10;                        viewModel.loginWithFacebook(token)&#10;                    } else {&#10;                        showSnack(&quot;Facebook token alınamadı&quot;)&#10;                    }&#10;                }&#10;                override fun onCancel() {&#10;                    showSnack(&quot;Facebook girişi iptal edildi&quot;)&#10;                }&#10;                override fun onError(error: FacebookException) {&#10;                    showSnack(&quot;Facebook hata: ${error.message}&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.loginBtn.setOnClickListener {&#10;            val email = binding.loginEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;            val password = binding.loginPasswordEditTxt.text?.toString()?.trim().orEmpty()&#10;&#10;            if (email.isEmpty() || password.isEmpty()) {&#10;                showSnack(&quot;Lütfen e-posta ve şifre girin&quot;)&#10;                return@setOnClickListener&#10;            }&#10;&#10;            hideKeyboard(binding.root)&#10;            setLoading(true)&#10;            viewModel.login(email, password)&#10;        }&#10;&#10;        binding.forgotPasswordTxt.setOnClickListener {&#10;            val email = binding.loginEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;            if (email.isEmpty()) {&#10;                showSnack(&quot;Şifre sıfırlamak için e-posta girin&quot;)&#10;                return@setOnClickListener&#10;            }&#10;            hideKeyboard(binding.root)&#10;            setLoading(true)&#10;            viewModel.sendResetEmail(email)&#10;        }&#10;&#10;        binding.loginGoogleBtn.setOnClickListener {&#10;            // Her zaman hesap seçimi için signOut çağrısı&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                startGoogleSignIn()&#10;            }&#10;        }&#10;&#10;        binding.loginfacebookBtn.setOnClickListener {&#10;            LoginManager.getInstance()&#10;                .logInWithReadPermissions(this, listOf(&quot;email&quot;, &quot;public_profile&quot;))&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        viewModel.login.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserLogin&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            } else {&#10;                showSnack(&quot;Giriş başarısız: $message&quot;)&#10;            }&#10;        }&#10;&#10;        viewModel.reset.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) showSnack(message)&#10;            else showSnack(&quot;Şifre sıfırlama başarısız: $message&quot;)&#10;        }&#10;&#10;        viewModel.google.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            if (success) {&#10;                val isNewUser = viewModel.isNewUserGoogle&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            }&#10;        }&#10;&#10;        viewModel.facebook.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message)&#10;            // success true ise yönlendirme&#10;        }&#10;    }&#10;&#10;    private fun startGoogleSignIn() {&#10;        val intent = googleSignInClient.signInIntent&#10;        googleLauncher.launch(intent)&#10;    }&#10;&#10;    @Deprecated(&quot;Facebook SDK için onActivityResult yönlendirmesi&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (::fbCallbackManager.isInitialized) {&#10;            fbCallbackManager.onActivityResult(requestCode, resultCode, data)&#10;        }&#10;    }&#10;&#10;    private fun showSnack(message: String) {&#10;        Snackbar.make(binding.root, message, Snackbar.LENGTH_SHORT).show()&#10;    }&#10;&#10;    private fun setLoading(loading: Boolean) {&#10;        binding.loadingOverlaylogin?.isVisible = loading&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            if (loading) {&#10;                binding.contentRoot?.setRenderEffect(&#10;                    RenderEffect.createBlurEffect(20f, 20f, Shader.TileMode.CLAMP)&#10;                )&#10;            } else {&#10;                binding.contentRoot?.setRenderEffect(null)&#10;            }&#10;        }&#10;        binding.loginBtn.isEnabled = !loading&#10;        binding.loginGoogleBtn.isEnabled = !loading&#10;        binding.loginfacebookBtn.isEnabled = !loading&#10;        binding.loginEmailEditTxt.isEnabled = !loading&#10;        binding.loginPasswordEditTxt.isEnabled = !loading&#10;        binding.progressBar?.isVisible = loading&#10;    }&#10;&#10;    private fun hideKeyboard(view: View) {&#10;        val imm = requireContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE)&#10;                as android.view.inputmethod.InputMethodManager&#10;        imm.hideSoftInputFromWindow(view.windowToken, 0)&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/auth/RegisterFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/ui/auth/RegisterFragment.kt" />
              <option name="originalContent" value="package com.ariftuncer.ne_yesem.presentation.ui.auth&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.RenderEffect&#10;import android.graphics.Shader&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.util.Patterns&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.view.isVisible&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentRegisterBinding&#10;import com.ariftuncer.ne_yesem.di.AppGraph&#10;import com.ariftuncer.ne_yesem.presentation.viewmodel.auth.AuthViewModel&#10;import com.facebook.CallbackManager&#10;import com.facebook.FacebookCallback&#10;import com.facebook.FacebookException&#10;import com.facebook.login.LoginManager&#10;import com.facebook.login.LoginResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.android.material.snackbar.Snackbar&#10;&#10;class RegisterFragment : Fragment() {&#10;&#10;    // ViewBinding (leak önlemek için nullable pattern)&#10;    private var _binding: FragmentRegisterBinding? = null&#10;    private val binding get() = _binding!!&#10;    private lateinit var overlay: View&#10;    private lateinit var root: View&#10;    private lateinit var spinner: View&#10;&#10;    private val viewModel: AuthViewModel by viewModels { AppGraph.authVmFactory }&#10;&#10;    // Google&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)&#10;                val idToken = account?.idToken&#10;                if (!idToken.isNullOrBlank()) {&#10;                    setLoading(true)&#10;                    viewModel.loginWithGoogle(idToken)&#10;                } else {&#10;                    showSnack(&quot;ID token alınamadı&quot;)&#10;                }&#10;            } catch (e: ApiException) {&#10;                showSnack(&quot;Google giriş hatası: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            showSnack(&quot;Google girişi iptal edildi&quot;)&#10;        }&#10;    }&#10;&#10;    // Facebook&#10;    private lateinit var fbCallbackManager: CallbackManager&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentRegisterBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupGoogle()&#10;        setupFacebook()&#10;        setupListeners()&#10;        setupObservers()&#10;    }&#10;&#10;    //region Setup&#10;&#10;    private fun setupGoogle() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            // Projende &quot;web_client_id&quot; kullandığını gördüm; değer strings.xml'de olmalı&#10;            .requestIdToken(getString(R.string.web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(requireActivity(), gso)&#10;    }&#10;&#10;    private fun setupFacebook() {&#10;        fbCallbackManager = CallbackManager.Factory.create()&#10;        LoginManager.getInstance().registerCallback(&#10;            fbCallbackManager,&#10;            object : FacebookCallback&lt;LoginResult&gt; {&#10;                override fun onSuccess(result: LoginResult) {&#10;                    val token = result.accessToken?.token&#10;                    if (!token.isNullOrBlank()) {&#10;                        setLoading(true)&#10;                        viewModel.loginWithFacebook(token)&#10;                    } else {&#10;                        showSnack(&quot;Facebook token alınamadı&quot;)&#10;                    }&#10;                }&#10;                override fun onCancel() {&#10;                    showSnack(&quot;Facebook ile giriş iptal edildi&quot;)&#10;                }&#10;                override fun onError(error: FacebookException) {&#10;                    showSnack(&quot;Facebook ile giriş hatası: ${error.message}&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    //endregion&#10;&#10;    //region UI events&#10;&#10;    private fun setupListeners() {&#10;        // E-posta ile kayıt&#10;        binding.registerBtn.setOnClickListener {&#10;            if (validateInputs()) {&#10;                val email = binding.registerEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;                val password = binding.registerPasswordEditTxt.text?.toString()?.trim().orEmpty()&#10;                hideKeyboard(binding.root)&#10;                setLoading(true)&#10;                // ViewModel’inde register(email, password) beklediğini görüyorum&#10;                viewModel.register(email, password)&#10;            }&#10;        }&#10;&#10;        // Google ile giriş/kayıt&#10;        binding.registerGoogleBtn.setOnClickListener {&#10;            // Temiz bir oturum için isteğe bağlı signOut&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                googleLauncher.launch(googleSignInClient.signInIntent)&#10;            }&#10;        }&#10;&#10;        // Facebook ile giriş/kayıt&#10;        binding.registerFacebookBtn.setOnClickListener {&#10;            LoginManager.getInstance()&#10;                .logInWithReadPermissions(this, listOf(&quot;email&quot;, &quot;public_profile&quot;))&#10;        }&#10;&#10;        // Zaten hesabım var → Login sayfasına geç&#10;        binding.haveAccountLoginText.setOnClickListener {&#10;            // Eğer ActivityLoginRegister içinde sayfa değiştiriyorsan:&#10;            (requireActivity() as? ActivityLoginRegister)?.replacePage(0)&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        // Email/Şifre ile kayıt sonucu&#10;        viewModel.register.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) {&#10;                showSnack(message)&#10;                // TODO: Başarılı kayıt sonrası yönlendirme&#10;            } else {&#10;                showSnack(message.ifBlank { &quot;Kayıt başarısız&quot; })&#10;            }&#10;        }&#10;&#10;        // Google sonucu&#10;        viewModel.google.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message.ifBlank { if (success) &quot;Google ile giriş başarılı&quot; else &quot;Google ile giriş başarısız&quot; })&#10;            // success true ise yönlendirme&#10;        }&#10;&#10;        // Facebook sonucu&#10;        viewModel.facebook.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message.ifBlank { if (success) &quot;Facebook ile giriş başarılı&quot; else &quot;Facebook ile giriş başarısız&quot; })&#10;            // success true ise yönlendirme&#10;        }&#10;    }&#10;&#10;    //endregion&#10;&#10;    //region Helpers&#10;&#10;    @Deprecated(&quot;Facebook SDK için onActivityResult yönlendirmesi&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (::fbCallbackManager.isInitialized) {&#10;            fbCallbackManager.onActivityResult(requestCode, resultCode, data)&#10;        }&#10;    }&#10;&#10;    private fun showSnack(message: String) {&#10;        Snackbar.make(binding.root, message, Snackbar.LENGTH_SHORT).show()&#10;    }&#10;&#10;    private fun setLoading(loading: Boolean) {&#10;        // RegisterFragment.xml’de eklediğimiz overlay ve içerik id’leri:&#10;        // contentRoot, loadingOverlay, progressBar&#10;        binding.loadingOverlay?.isVisible = loading&#10;&#10;        // Android 12+ gerçek blur (isteğe bağlı)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            if (loading) {&#10;                binding.contentRoot?.setRenderEffect(&#10;                    RenderEffect.createBlurEffect(20f, 20f, Shader.TileMode.CLAMP)&#10;                )&#10;            } else {&#10;                binding.contentRoot?.setRenderEffect(null)&#10;            }&#10;        }&#10;&#10;        // Formu kilitle&#10;        binding.registerBtn.isEnabled = !loading&#10;        binding.registerGoogleBtn.isEnabled = !loading&#10;        binding.registerFacebookBtn.isEnabled = !loading&#10;        binding.registerEmailEditTxt.isEnabled = !loading&#10;        binding.registerPasswordEditTxt.isEnabled = !loading&#10;        binding.registerPasswordApproveEditTxt.isEnabled = !loading&#10;        binding.progressBar?.isVisible = loading&#10;    }&#10;&#10;    private fun hideKeyboard(view: View) {&#10;        val imm = requireContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE)&#10;                as android.view.inputmethod.InputMethodManager&#10;        imm.hideSoftInputFromWindow(view.windowToken, 0)&#10;    }&#10;&#10;    private fun validateInputs(): Boolean {&#10;        val email = binding.registerEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;        val password = binding.registerPasswordEditTxt.text?.toString()?.trim().orEmpty()&#10;        val confirm = binding.registerPasswordApproveEditTxt.text?.toString()?.trim().orEmpty()&#10;&#10;        var ok = true&#10;&#10;        if (email.isEmpty()) {&#10;            binding.registerEmailLayout.error = &quot;E-posta boş olamaz&quot;&#10;            ok = false&#10;        } else if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            binding.registerEmailLayout.error = &quot;Geçersiz e-posta adresi&quot;&#10;            ok = false&#10;        } else {&#10;            binding.registerEmailLayout.error = null&#10;        }&#10;&#10;        if (password.length &lt; 6) {&#10;            binding.registerPasswordLayout.error = &quot;Şifre en az 6 karakter olmalı&quot;&#10;            ok = false&#10;        } else {&#10;            binding.registerPasswordLayout.error = null&#10;        }&#10;&#10;        if (confirm != password) {&#10;            binding.registerPasswordApproveLayout.error = &quot;Şifreler uyuşmuyor&quot;&#10;            ok = false&#10;        } else {&#10;            binding.registerPasswordApproveLayout.error = null&#10;        }&#10;&#10;        return ok&#10;    }&#10;&#10;    //endregion&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.ui.auth&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.RenderEffect&#10;import android.graphics.Shader&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.util.Patterns&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.view.isVisible&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import com.ariftuncer.ne_yesem.R&#10;import com.ariftuncer.ne_yesem.databinding.FragmentRegisterBinding&#10;import com.ariftuncer.ne_yesem.di.AppGraph&#10;import com.ariftuncer.ne_yesem.presentation.viewmodel.auth.AuthViewModel&#10;import com.ariftuncer.ne_yesem.presentation.ui.pref.PrefActivity&#10;import com.ariftuncer.ne_yesem.presentation.ui.home.HomeActivity&#10;import com.facebook.CallbackManager&#10;import com.facebook.FacebookCallback&#10;import com.facebook.FacebookException&#10;import com.facebook.login.LoginManager&#10;import com.facebook.login.LoginResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.android.material.snackbar.Snackbar&#10;&#10;class RegisterFragment : Fragment() {&#10;&#10;    // ViewBinding (leak önlemek için nullable pattern)&#10;    private var _binding: FragmentRegisterBinding? = null&#10;    private val binding get() = _binding!!&#10;    private lateinit var overlay: View&#10;    private lateinit var root: View&#10;    private lateinit var spinner: View&#10;&#10;    private val viewModel: AuthViewModel by viewModels { AppGraph.authVmFactory }&#10;&#10;    // Google&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)&#10;                val idToken = account?.idToken&#10;                if (!idToken.isNullOrBlank()) {&#10;                    setLoading(true)&#10;                    viewModel.loginWithGoogle(idToken)&#10;                } else {&#10;                    showSnack(&quot;ID token alınamadı&quot;)&#10;                }&#10;            } catch (e: ApiException) {&#10;                showSnack(&quot;Google giriş hatası: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            showSnack(&quot;Google girişi iptal edildi&quot;)&#10;        }&#10;    }&#10;&#10;    // Facebook&#10;    private lateinit var fbCallbackManager: CallbackManager&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentRegisterBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupGoogle()&#10;        setupFacebook()&#10;        setupListeners()&#10;        setupObservers()&#10;    }&#10;&#10;    //region Setup&#10;&#10;    private fun setupGoogle() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(requireActivity(), gso)&#10;    }&#10;&#10;    private fun setupFacebook() {&#10;        fbCallbackManager = CallbackManager.Factory.create()&#10;        LoginManager.getInstance().registerCallback(&#10;            fbCallbackManager,&#10;            object : FacebookCallback&lt;LoginResult&gt; {&#10;                override fun onSuccess(result: LoginResult) {&#10;                    val token = result.accessToken?.token&#10;                    if (!token.isNullOrBlank()) {&#10;                        setLoading(true)&#10;                        viewModel.loginWithFacebook(token)&#10;                    } else {&#10;                        showSnack(&quot;Facebook token alınamadı&quot;)&#10;                    }&#10;                }&#10;                override fun onCancel() {&#10;                    showSnack(&quot;Facebook ile giriş iptal edildi&quot;)&#10;                }&#10;                override fun onError(error: FacebookException) {&#10;                    showSnack(&quot;Facebook ile giriş hatası: ${error.message}&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    //endregion&#10;&#10;    //region UI events&#10;&#10;    private fun setupListeners() {&#10;        // E-posta ile kayıt&#10;        binding.registerBtn.setOnClickListener {&#10;            if (validateInputs()) {&#10;                val email = binding.registerEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;                val password = binding.registerPasswordEditTxt.text?.toString()?.trim().orEmpty()&#10;                hideKeyboard(binding.root)&#10;                setLoading(true)&#10;                // ViewModel’inde register(email, password) beklediğini görüyorum&#10;                viewModel.register(email, password)&#10;            }&#10;        }&#10;&#10;        // Google ile giriş/kayıt&#10;        binding.registerGoogleBtn.setOnClickListener {&#10;            // Her zaman hesap seçimi için signOut çağrısı&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                googleLauncher.launch(googleSignInClient.signInIntent)&#10;            }&#10;        }&#10;&#10;        // Facebook ile giriş/kayıt&#10;        binding.registerFacebookBtn.setOnClickListener {&#10;            LoginManager.getInstance()&#10;                .logInWithReadPermissions(this, listOf(&quot;email&quot;, &quot;public_profile&quot;))&#10;        }&#10;&#10;        // Zaten hesabım var → Login sayfasına geç&#10;        binding.haveAccountLoginText.setOnClickListener {&#10;            // Eğer ActivityLoginRegister içinde sayfa değiştiriyorsan:&#10;            (requireActivity() as? ActivityLoginRegister)?.replacePage(0)&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        // Email/Şifre ile kayıt sonucu&#10;        viewModel.register.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            if (success) {&#10;                showSnack(message)&#10;                val isNewUser = viewModel.isNewUserRegister // ViewModel'da bu property olmalı&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            } else {&#10;                showSnack(message.ifBlank { &quot;Kayıt başarısız&quot; })&#10;            }&#10;        }&#10;&#10;        // Google sonucu&#10;        viewModel.google.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message.ifBlank { if (success) &quot;Google ile giriş başarılı&quot; else &quot;Google ile giriş başarısız&quot; })&#10;            if (success) {&#10;                // isNewUser kontrolü için ViewModel'dan AuthOutcome alınmalı&#10;                // Örnek: viewModel.authOutcome.value?.isNewUser&#10;                val isNewUser = viewModel.isNewUserGoogle // ViewModel'da bu property olmalı&#10;                if (isNewUser == true) {&#10;                    startActivity(Intent(requireContext(), PrefActivity::class.java))&#10;                    requireActivity().finish()&#10;                } else {&#10;                    startActivity(Intent(requireContext(), HomeActivity::class.java))&#10;                    requireActivity().finish()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Facebook sonucu&#10;        viewModel.facebook.observe(viewLifecycleOwner) { (success, message) -&gt;&#10;            setLoading(false)&#10;            showSnack(message.ifBlank { if (success) &quot;Facebook ile giriş başarılı&quot; else &quot;Facebook ile giriş başarısız&quot; })&#10;            // success true ise yönlendirme&#10;        }&#10;    }&#10;&#10;    //endregion&#10;&#10;    //region Helpers&#10;&#10;    @Deprecated(&quot;Facebook SDK için onActivityResult yönlendirmesi&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (::fbCallbackManager.isInitialized) {&#10;            fbCallbackManager.onActivityResult(requestCode, resultCode, data)&#10;        }&#10;    }&#10;&#10;    private fun showSnack(message: String) {&#10;        Snackbar.make(binding.root, message, Snackbar.LENGTH_SHORT).show()&#10;    }&#10;&#10;    private fun setLoading(loading: Boolean) {&#10;        // RegisterFragment.xml’de eklediğimiz overlay ve içerik id’leri:&#10;        // contentRoot, loadingOverlay, progressBar&#10;        binding.loadingOverlay?.isVisible = loading&#10;&#10;        // Android 12+ gerçek blur (isteğe bağlı)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            if (loading) {&#10;                binding.contentRoot?.setRenderEffect(&#10;                    RenderEffect.createBlurEffect(20f, 20f, Shader.TileMode.CLAMP)&#10;                )&#10;            } else {&#10;                binding.contentRoot?.setRenderEffect(null)&#10;            }&#10;        }&#10;&#10;        // Formu kilitle&#10;        binding.registerBtn.isEnabled = !loading&#10;        binding.registerGoogleBtn.isEnabled = !loading&#10;        binding.registerFacebookBtn.isEnabled = !loading&#10;        binding.registerEmailEditTxt.isEnabled = !loading&#10;        binding.registerPasswordEditTxt.isEnabled = !loading&#10;        binding.registerPasswordApproveEditTxt.isEnabled = !loading&#10;        binding.progressBar?.isVisible = loading&#10;    }&#10;&#10;    private fun hideKeyboard(view: View) {&#10;        val imm = requireContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE)&#10;                as android.view.inputmethod.InputMethodManager&#10;        imm.hideSoftInputFromWindow(view.windowToken, 0)&#10;    }&#10;&#10;    private fun validateInputs(): Boolean {&#10;        val email = binding.registerEmailEditTxt.text?.toString()?.trim().orEmpty()&#10;        val password = binding.registerPasswordEditTxt.text?.toString()?.trim().orEmpty()&#10;        val confirm = binding.registerPasswordApproveEditTxt.text?.toString()?.trim().orEmpty()&#10;&#10;        var ok = true&#10;&#10;        if (email.isEmpty()) {&#10;            binding.registerEmailLayout.error = &quot;E-posta boş olamaz&quot;&#10;            ok = false&#10;        } else if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            binding.registerEmailLayout.error = &quot;Geçersiz e-posta adresi&quot;&#10;            ok = false&#10;        } else {&#10;            binding.registerEmailLayout.error = null&#10;        }&#10;&#10;        if (password.length &lt; 6) {&#10;            binding.registerPasswordLayout.error = &quot;Şifre en az 6 karakter olmalı&quot;&#10;            ok = false&#10;        } else {&#10;            binding.registerPasswordLayout.error = null&#10;        }&#10;&#10;        if (confirm != password) {&#10;            binding.registerPasswordApproveLayout.error = &quot;Şifreler uyuşmuyor&quot;&#10;            ok = false&#10;        } else {&#10;            binding.registerPasswordApproveLayout.error = null&#10;        }&#10;&#10;        return ok&#10;    }&#10;&#10;    //endregion&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/viewmodel/auth/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ariftuncer/ne_yesem/presentation/viewmodel/auth/AuthViewModel.kt" />
              <option name="originalContent" value="package com.ariftuncer.ne_yesem.presentation.viewmodel.auth&#10;&#10;import androidx.lifecycle.*&#10;import com.ariftuncer.ne_yesem.core.result.Either&#10;import com.ariftuncer.ne_yesem.core.result.readableMessage&#10;import com.ariftuncer.ne_yesem.domain.usecase.auth.*&#10;import com.ne_yesem.domain.usecase.auth.SignUpWithEmail&#10;import kotlinx.coroutines.launch&#10;&#10;class AuthViewModel(&#10;    private val signInEmail: SignInWithEmail,&#10;    private val signUpEmail: SignUpWithEmail,&#10;    private val signInGoogle: SignInWithGoogle,&#10;    private val signInFacebook: SignInWithFacebook,&#10;    private val sendPasswordReset: SendPasswordReset&#10;) : ViewModel() {&#10;&#10;    private val _login = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#10;    val login: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _login&#10;&#10;    private val _register = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#10;    val register: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _register&#10;&#10;    private val _google = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#10;    val google: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _google&#10;&#10;    private val _facebook = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#10;    val facebook: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _facebook&#10;&#10;    private val _reset = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#10;    val reset: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _reset&#10;&#10;    fun login(email: String, password: String) = viewModelScope.launch {&#10;        when (val r = signInEmail(email, password)) {&#10;            is Either.Left  -&gt; _login.postValue(false to r.value.readableMessage())&#10;            is Either.Right -&gt; _login.postValue(true to &quot;Giriş başarılı&quot;)&#10;        }&#10;    }&#10;&#10;    fun register(email: String, password: String) = viewModelScope.launch {&#10;        when (val r = signUpEmail(email, password)) {&#10;            is Either.Left  -&gt; _register.postValue(false to r.value.readableMessage())&#10;            is Either.Right -&gt; _register.postValue(true to &quot;Kayıt başarılı&quot;)&#10;        }&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) = viewModelScope.launch {&#10;        when (val r = signInGoogle(idToken)) {&#10;            is Either.Left  -&gt; _google.postValue(false to r.value.readableMessage())&#10;            is Either.Right -&gt; _google.postValue(true to &quot;Google ile giriş başarılı&quot;)&#10;        }&#10;    }&#10;&#10;    fun loginWithFacebook(token: String) = viewModelScope.launch {&#10;        when (val r = signInFacebook(token)) {&#10;            is Either.Left  -&gt; _facebook.postValue(false to r.value.readableMessage())&#10;            is Either.Right -&gt; _facebook.postValue(true to &quot;Facebook ile giriş başarılı&quot;)&#10;        }&#10;    }&#10;&#10;    fun sendResetEmail(email: String) = viewModelScope.launch {&#10;        when (val r = sendPasswordReset(email)) {&#10;            is Either.Left  -&gt; _reset.postValue(false to r.value.readableMessage())&#10;            is Either.Right -&gt; _reset.postValue(true to &quot;Şifre sıfırlama e-postası gönderildi&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;class AuthViewModelFactory(&#10;    private val provider: Provider&#10;) : ViewModelProvider.Factory {&#10;&#10;    interface Provider {&#10;        val signInEmail: SignInWithEmail&#10;        val signUpEmail: SignUpWithEmail&#10;        val signInGoogle: SignInWithGoogle&#10;        val signInFacebook: SignInWithFacebook&#10;        val sendPasswordReset: SendPasswordReset&#10;    }&#10;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        require(modelClass.isAssignableFrom(AuthViewModel::class.java))&#10;        return AuthViewModel(&#10;            provider.signInEmail,&#10;            provider.signUpEmail,&#10;            provider.signInGoogle,&#10;            provider.signInFacebook,&#10;            provider.sendPasswordReset&#10;        ) as T&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ariftuncer.ne_yesem.presentation.viewmodel.auth&#13;&#10;&#13;&#10;import androidx.lifecycle.*&#13;&#10;import com.ariftuncer.ne_yesem.core.result.Either&#13;&#10;import com.ariftuncer.ne_yesem.core.result.readableMessage&#13;&#10;import com.ariftuncer.ne_yesem.domain.model.AuthOutcome&#13;&#10;import com.ariftuncer.ne_yesem.domain.usecase.auth.*&#13;&#10;import com.ne_yesem.domain.usecase.auth.SignUpWithEmail&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;class AuthViewModel(&#13;&#10;    private val signInEmail: SignInWithEmail,&#13;&#10;    private val signUpEmail: SignUpWithEmail,&#13;&#10;    private val signInGoogle: SignInWithGoogle,&#13;&#10;    private val signInFacebook: SignInWithFacebook,&#13;&#10;    private val sendPasswordReset: SendPasswordReset&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    private val _login = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#13;&#10;    val login: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _login&#13;&#10;&#13;&#10;    private val _register = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#13;&#10;    val register: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _register&#13;&#10;&#13;&#10;    private val _google = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#13;&#10;    val google: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _google&#13;&#10;&#13;&#10;    private val _facebook = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#13;&#10;    val facebook: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _facebook&#13;&#10;&#13;&#10;    private val _reset = MutableLiveData&lt;Pair&lt;Boolean, String&gt;&gt;()&#13;&#10;    val reset: LiveData&lt;Pair&lt;Boolean, String&gt;&gt; = _reset&#13;&#10;&#13;&#10;    private var lastAuthOutcome: AuthOutcome? = null&#13;&#10;    val isNewUserRegister: Boolean?&#13;&#10;        get() = lastAuthOutcome?.isNewUser&#13;&#10;    val isNewUserGoogle: Boolean?&#13;&#10;        get() = lastAuthOutcome?.isNewUser&#13;&#10;    val isNewUserLogin: Boolean?&#13;&#10;        get() = lastAuthOutcome?.isNewUser&#13;&#10;&#13;&#10;    fun login(email: String, password: String) = viewModelScope.launch {&#13;&#10;        when (val r = signInEmail(email, password)) {&#13;&#10;            is Either.Left  -&gt; _login.postValue(false to r.value.readableMessage())&#13;&#10;            is Either.Right -&gt; {&#13;&#10;                lastAuthOutcome = r.value&#13;&#10;                _login.postValue(true to &quot;Giriş başarılı&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun register(email: String, password: String) = viewModelScope.launch {&#13;&#10;        when (val r = signUpEmail(email, password)) {&#13;&#10;            is Either.Left  -&gt; _register.postValue(false to r.value.readableMessage())&#13;&#10;            is Either.Right -&gt; {&#13;&#10;                lastAuthOutcome = r.value&#13;&#10;                _register.postValue(true to &quot;Kayıt başarılı&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loginWithGoogle(idToken: String) = viewModelScope.launch {&#13;&#10;        when (val r = signInGoogle(idToken)) {&#13;&#10;            is Either.Left  -&gt; _google.postValue(false to r.value.readableMessage())&#13;&#10;            is Either.Right -&gt; {&#13;&#10;                lastAuthOutcome = r.value&#13;&#10;                _google.postValue(true to &quot;Google ile giriş başarılı&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loginWithFacebook(token: String) = viewModelScope.launch {&#13;&#10;        when (val r = signInFacebook(token)) {&#13;&#10;            is Either.Left  -&gt; _facebook.postValue(false to r.value.readableMessage())&#13;&#10;            is Either.Right -&gt; _facebook.postValue(true to &quot;Facebook ile giriş başarılı&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun sendResetEmail(email: String) = viewModelScope.launch {&#13;&#10;        when (val r = sendPasswordReset(email)) {&#13;&#10;            is Either.Left  -&gt; _reset.postValue(false to r.value.readableMessage())&#13;&#10;            is Either.Right -&gt; _reset.postValue(true to &quot;Şifre sıfırlama e-postası gönderildi&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;class AuthViewModelFactory(&#13;&#10;    private val provider: Provider&#13;&#10;) : ViewModelProvider.Factory {&#13;&#10;&#13;&#10;    interface Provider {&#13;&#10;        val signInEmail: SignInWithEmail&#13;&#10;        val signUpEmail: SignUpWithEmail&#13;&#10;        val signInGoogle: SignInWithGoogle&#13;&#10;        val signInFacebook: SignInWithFacebook&#13;&#10;        val sendPasswordReset: SendPasswordReset&#13;&#10;    }&#13;&#10;&#13;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#13;&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#13;&#10;        require(modelClass.isAssignableFrom(AuthViewModel::class.java))&#13;&#10;        return AuthViewModel(&#13;&#10;            provider.signInEmail,&#13;&#10;            provider.signUpEmail,&#13;&#10;            provider.signInGoogle,&#13;&#10;            provider.signInFacebook,&#13;&#10;            provider.sendPasswordReset&#13;&#10;        ) as T&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>